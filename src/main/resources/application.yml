server:
  port: 8081

spring:
  application:
    name: auth
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${TASKE_AUTH_DB_URL}
    username: ${TASKE_AUTH_DB_USERNAME}
    password: ${TASKE_AUTH_DB_PASSWORD}
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
    generate-ddl: true
    show-sql: false
  data:
    redis:
      host: ${TASKE_REDIS_HOST}
      port: ${TASKE_REDIS_PORT}
      password: ${TASKE_REDIS_PW}
  # kafka
  kafka:
    bootstrap-servers: localhost:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
    consumer:
      group-id: auth-group
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      auto-offset-reset: earliest
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "com.hanyahunya.kafkaDto"
        spring.json.use.type.headers: true
  # gRPC
  grpc:
    client:
#      worker-service:
#        address: static://localhost:9090
#        negotiation-type: plaintext
      channels:
        integration-service:
          address: static://localhost:9091
          negotiation-type: plaintext

oauth2:
  google:
    client-id: ${TASKE_GOOGLE_CLIENT_ID}
    issuer: https://accounts.google.com

app:
  frontend:
    url: https://hanyahunya.com/taske

# jwt
jwt:
  accesstoken:
    secret: ${TASKE_JWT_ACCESS_SECRET}
  refreshtoken:
    secret: ${TASKE_JWT_REFRESH_SECRET}
  verificationtoken:
    secret: ${TASKE_JWT_VERIFY_SECRET}

# encoder
encoder:
  secret: ${TASKE_AUTH_ENCODER_SECRET}